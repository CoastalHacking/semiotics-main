@GenModel(editDirectory="/io.opensemantics.semiotics.search.eclipse.edit/src-gen")
package io.opensemantics.semiotics.search.eclipse

import io.opensemantics.semiotics.search.Search
import io.opensemantics.semiotics.search.SearchResult
import org.eclipse.jdt.core.IJavaElement
import io.opensemantics.semiotics.search.SearchMatch

type IJavaElement wraps IJavaElement

/* @see org.eclipse.jdt.core.search.SearchPattern */
class EclipseJavaSearch extends Search
{
  // TODO: FP/FN annotation
  /* FN-prone : true
   * FP-prone : false
   * @see org.eclipse.jdt.core.search.SearchMatch.getAccuracy
   */
  boolean requireAccurate = "true"
  MatchRule matchRule
  MatchFlag matchFlag
  SearchForNature searchFor
  LimitTo limitTo
  LimitToFineGrain[] limitToFineGrains
}

enum MatchRule
{
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_PATTERN_MATCH */
  Pattern = 0   // assumed default
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_EXACT_MATCH */
  Exact
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_PREFIX_MATCH */
  Prefix
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_REGEXP_MATCH */
  Regex
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_CAMELCASE_MATCH */
  Camelcase
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH */
  CamelcaseSamePartCount
}

enum MatchFlag
{
  Unset = 0   // no safe defaults
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_CASE_SENSITIVE */
  CaseSensitive
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_ERASURE_MATCH */
  Erasure
  /* @see org.eclipse.jdt.core.search.SearchPattern.R_EQUIVALENT_MATCH */
  Equivalent
}

enum SearchForNature
{
  Unset = 0   // no reasonable default
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.TYPE */
  Type
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.CLASS */
  Class
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.INTERFACE */
  Interface
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.ENUM */
  Enum
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.ANNOTATION_TYPE */
  AnnotationType
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.CLASS_AND_ENUM */
  ClassAndEnum
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.CLASS_AND_INTERFACE */
  ClassAndInterface
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.FIELD */
  Field
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.METHOD */
  Method
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.CONSTRUCTOR */
  Constructor
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.PACKAGE */
  Package
}

enum LimitTo
{
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.ALL_OCCURRENCES */
  AllOccurrences = 0  // FP-prone default
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.DECLARATIONS */
  Declarations
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.REFERENCES */
  References
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.IMPLEMENTORS */
  Implementors
}

enum LimitToFineGrain
{
  Unset = 0   // no safe defaults
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.FIELD_DECLARATION_TYPE_REFERENCE */
  FieldDeclarationTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.LOCAL_VARIABLE_DECLARATION_TYPE_REFERENCE */
  LocalVariableDeclarationTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.PARAMETER_DECLARATION_TYPE_REFERENCE */
  ParameterDeclarationTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.SUPERTYPE_TYPE_REFERENCE */
  SupertypeTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.THROWS_CLAUSE_TYPE_REFERENCE */
  ThrowsClauseTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.CAST_TYPE_REFERENCE */
  CastTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.CATCH_TYPE_REFERENCE */
  CatchTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.CLASS_INSTANCE_CREATION_TYPE_REFERENCE */
  ClassInstanceCreationTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.RETURN_TYPE_REFERENCE */
  ReturnTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.IMPORT_DECLARATION_TYPE_REFERENCE */
  ImportDeclarationTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.ANNOTATION_TYPE_REFERENCE */
  AnnotationTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.TYPE_ARGUMENT_TYPE_REFERENCE */
  TypeArgumentTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.TYPE_VARIABLE_BOUND_TYPE_REFERENCE */
  TypeVariableBoundTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.WILDCARD_BOUND_TYPE_REFERENCE */
  WildcardBoundTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.INSTANCEOF_TYPE_REFERENCE */
  InstanceofTypeReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.SUPER_REFERENCE */
  SuperReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.QUALIFIED_REFERENCE */
  QualifiedReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.THIS_REFERENCE */
  ThisReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.IMPLICIT_THIS_REFERENCE */
  ImplicitThisReference
  /* @see org.eclipse.jdt.core.search.IJavaSearchConstants.METHOD_REFERENCE_EXPRESSION */
  MethodReferenceExpression
}


class EclipseJavaSearchResult extends SearchResult
{
  transient IJavaElement element
  boolean accurate
  int length
  int offset
}

class EclipseJavaSearchMatch extends SearchMatch
{
  transient IJavaElement element
  boolean accurate
  int length
  int offset
}