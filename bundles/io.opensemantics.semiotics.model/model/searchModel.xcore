@GenModel(editDirectory="/io.opensemantics.semiotics.search.edit/src-gen")
package io.opensemantics.semiotics.search

import org.eclipse.emf.ecore.EDiagnosticChain
import org.eclipse.emf.ecore.EMap

enum TriBool
{
  Unknown
  True
  False
}

class Application
{
  String name
  refers Project[] projects opposite applications
}

class Project
{
  String name
  refers Application[] applications opposite projects
}


/* Fully inspired by Ed Merks' YouTube tutorial
 * @link https://www.youtube.com/watch?v=zjluqfxx6B8
 */
abstract class Node
{
  contains Node[] children opposite parent
  container Node parent opposite children
  derived NodeKind nodeKind get
  {
    if (parent == null)
      if (children.empty) NodeKind::SINGLETON else NodeKind::ROOT
    else
      if (children.empty) NodeKind::LEAF else NodeKind::INTERMEDIATE
  }
}

enum NodeKind
{
  Singleton
  Root
  Intermediate
  Leaf
}

// TODO: better name
class SearchLibrary
{
  String description
  contains Search[] searches opposite library
}

enum SearchLanguageType
{
  None
  Java
  Python
}

class Search extends Node
{
  String description
  contains SearchResult result opposite search
  container SearchLibrary library opposite searches
  // Limitation in Xcore is that a subclass cannot override a super-class
  // value. Will need to do it when setting up the object or
  // '@generate not' the code
  SearchLanguageType language = "None"
}

abstract class SearchMatch
{
  container SearchResult result opposite matches
  derived String description get
  {
    if (result != null) result.description
  }
}

abstract class SearchResult
{
  
  contains SearchMatch[] matches opposite result
  container Search search opposite result
  derived String description get
  {
    if (search != null) search.description
  }
}

